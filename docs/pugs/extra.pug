doctype html
html
    head
        include includes/head.pug
    body
        header
            include includes/header.pug
        nav
            include includes/nav.pug
        aside.left
            include  includes/aside.pug
        aside.right

        main
            article
                h1 Extra

                section#E-PID
                    h2 PID
                    p
                        | A PID-controller is the most popular and most used <em>closed-loop controller</em>.
                    p
                        | A PID-controller receives an input, this will be the desired value (or state) of the system.
                        | Often this is called the <em>setpoint</em>, in formulas <em>sp</em> is used. The current
                        | state (or process-value) is denoted as <em>pv</em>. Often this is a value coming from a
                        | sensor, and needs to be converted in order to work with the PID-controller. Here it will be
                        | assumed, for simplicity, that the process-value is already correctly formatted by the process
                        | itself.
                    p
                        | A PID-controller is based around three parallel calculations:
                        | the <b>P</b>roportional, the <b>I</b>ntegral and the <b>D</b>erivative.
                        | Each calculation has its own weight in the final result. These weights are called K-factors.
                        | The PID-controller can be tuned and modified by calibrating these K-factors.
                    p
                        | The PID-controller is time-dependant, as a result all functions and expressions are a function
                        | of time. Since the output is fed back to the input, this controller is closed loop.

                    h3 Input
                    h4 Setpoint
                    p
                        | The setpoint, as mentioned, is the desired state of the system. The controller will do
                        | everything it can to get the system to that state.
                        br
                        | In most cases the setpoint is static; it is set once (during calibration) and never changed.

                    h4 Error
                    p
                        | The input to the actual PID-algorithm is called the error. This is a result from subtracting
                        | the process-value from the setpoint.
                    .formula
                        p $$e(t) = sp(t) - pv(t)$$
                        p.caption Formula for the error
                    p
                        | The PID-controller will do everything to get the system to the desired state, this is
                        | achieved when the error becomes zero. Or when the process-value becomes equal to the setpoint.


                    h3 Proportional - P
                    p
                        | The first of the PID calculations is the easiest one. The result from this calculation is
                        | proportional to the error, as the name would imply. The K<sub>p</sub>-factor will determine
                        | how proportional the result is to the error. With a larger K<sub>p</sub>-factor the result
                        | will rise quicker with a rising error, while a smaller K<sub>p</sub>-factor will result in
                        | a slower rising result.

                    .formula
                        p $$P = K_{p} \cdot e(t)$$
                        p.caption Formula for a P-controller

                    p
                        | The P-term is a really simple but effective term. For slow changing processes, a P only
                        | controller is sufficient. The P-term, however, "looks" only at the current error, because of
                        | this <em>overshoot</em> will appear quickly. This overshoot will also lead to an oscillating
                        | controller. The state of the system will bounce around the desired state.
                        | The D-term offers a solution to this issue.
                    p
                        | The P-term will not act on small errors, as the result will be to small to have an impact.
                        | In order to resolve long-standing small errors the I-term is needed.

                    h3 Integral - I

                    .formula
                        p $$I = K_{i} \int_0^t e(t)dt$$
                        p.caption Formula for a I-controller

                    h3 Derivative - D

                    .formula
                        p $$D = K_{d} \frac{de(t)}{dt}$$
                        p.caption Formula for a D-controller

                    h3 Output

                    .formula
                        p
                            | $$u(t) = P + I + D$$
                            | $$\Leftrightarrow$$
                            | $$u(t) = \Biggl[K_{p} \cdot e(t)\Biggr] + \Biggl[K_{i} \int_0^t e(t)dt\Biggr] +
                            | \Biggl[K_{d} \frac{de(t)}{dt}\Biggr]$$
                        p.caption Formula for a PID-controller

                    h3 Continuous PID

                    h3 Discrete PID

                section#E-vision
                    h2 Vision
                    h3 Images as analog signals
                    h3 Threshold
                    h3 Kernel convolution
                    h3 Blur
                    h4 Mean blur
                    h4 Gaussian blur
                    h3 Edge detection
                    h4 Sobel Operator
                    h4 Canny Edge Detection

                section#E-raspbian
                    h2 Raspbian - headless

            div
                .bottom_navbar
                    .back
                        a(href="conclusion.html") &#171; back
                .bottom_navbar
                    //.next
                    //    a(href="#") next &#187;

        footer
            include includes/footer.pug