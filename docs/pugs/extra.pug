doctype html
html(lang="en")
    head
        include includes/head.pug

    body
        header
            include includes/header.pug
        nav
            include includes/nav.pug

        .page
            aside.left
                include includes/header.pug
            main
                h1.page-title Extra
                article#e-pid
                    h1.article-title PID
                    section
                        h1.section-title What is a PID?
                        p
                            | A PID-controller is the most popular and most used <em>closed-loop controller</em>.
                        figure.center-aligned
                            img(src="assets/img/thesis/PID.bmp"
                                alt="PID-controller schematic")
                            figcaption
                                a(href="#") PID-controller schematic
                                br
                                | &copy; 2019
                        p
                            | A PID-controller receives an input, this will be the desired value (or state) of the
                            | system. Often this is called the <em>set-point</em>, in formulas <em>sp</em> is used. The
                            | current state (or process-value) is denoted as <em>pv</em>. Often this is a value coming
                            | from a sensor, and needs to be converted in order to work with the PID-controller. Here
                            | it will be assumed, for simplicity, that the process-value is already correctly formatted
                            | by the process itself.
                        p
                            | A PID-controller is based around three parallel calculations:
                            | the <b>P</b>roportional, the <b>I</b>ntegral and the <b>D</b>erivative.
                            | Each calculation has its own weight in the final result. These weights are called
                            | K-factors. The PID-controller can be tuned and modified by calibrating these K-factors.
                        p
                            | The PID-controller is time-dependant, as a result all functions and expressions are a
                            | function of time. The PID-controller is closed-loop controller since the output is fed
                            | (indirectly) back to the input.
                    section
                        h1.section-title Input
                        h1.section-subtitle Set-point
                        p
                            | The set-point, as mentioned, is the desired state of the system. The controller will do
                            | everything it can to get the system to that state.
                            br
                            | In most cases the set-point is static; it is set once (during calibration) and never
                            | changed.
                        h1.section-subtitle Error
                        p
                            | The input to the actual PID-algorithm is called the error. This is a result from
                            | subtracting the process-value from the set-point.
                        .formula-container
                            .formula
                                p $$e(t) = sp(t) - pv(t)$$
                                p.caption Formula for the error
                        p
                            | The PID-controller will do everything to get the system to the desired state, this is
                            | achieved when the error becomes zero. Or when the process-value becomes equal to the setpoint.
                    section
                        h1.section-title Proportional - P
                        p
                            | The first of the PID calculations is the easiest one. The result from this calculation is
                            | proportional to the error, as the name would imply. The K<sub>p</sub>-factor will
                            | determine how proportional the result is to the error. With a larger K<sub>p</sub>-factor
                            | the result will rise quicker with a rising error, while a smaller K<sub>p</sub>-factor
                            | will result in a slower rising result.
                        .formula-container
                            .formula
                                p $$P = K_{p} \cdot e(t)$$
                                p.caption Formula for a P-controller
                        p
                            | The P-term is a really simple but effective term. For slow changing processes, a P only
                            | controller is sufficient. The P-term, however, "looks" only at the current error, because
                            | of this <em>overshoot</em> will appear quickly. This overshoot will also lead to an
                            | oscillating controller. The state of the system will bounce around the desired state.
                            | The D-term offers a solution to this issue.
                        p
                            | The P-term will not act on small errors, as the result will be to small to have an impact.
                            | In order to resolve long-standing small errors the I-term is needed.
                    section
                        h1.section-title Integral - I
                        p
                            | The I-term will integrate the error over time. With a constant (small) error the output of
                            | this term will continue to grow, eventually leading to a response that is strong enough to
                            | to work away that the cause of that error.
                            | The I-term "looks" into the past, as it were.
                        .formula-container
                            .formula
                                p $$I = K_{i} \int_0^t e(t)dt$$
                                p.caption Formula for a I-controller
                        p
                            | The I-term is used most in system where the state changes slowly. When the state changes
                            | rapidly, the error won't be present long enough to make the output of the I-term rise
                            | significantly. As a result it won't ever have enough weight in the final result to matter.
                            | In a fast changing system it is best to leave out the I-term. This will save in
                            | calculation time and resources.

                        p
                            | Due to the nature in which integrals work, it is important that the I-term is limited at
                            | all times. If an error persists the output of the I-term will keep on rising. In theory
                            | the output will rise to infinity.
                        p
                            | In practice the I-term is often limited from the start. In the case of an analog
                            | implementation, the output value can never rise above the supply voltage.
                            br
                            | In a digital implementation, the output will be held in a certain variable type. If the
                            | output keeps rising, a certain point there will be an overflow, and the variable will roll
                            | around to the smallest value it can hold (or vice-versa).
                            br
                            | There are limitations already in place. But in the case of the digital implementation this
                            | limit would have disastrous consequences. Because of the value wrapping around, the
                            | controller would start steering in the opposite direction, making the error even large.
                            | This would create an enormously unstable system, that could run-away at any moment.
                        p
                            | In practice there will always be limitations. However by implementing our own limits, we
                            | can control when they get hit and how they get hit. This will result in expected behaviour
                            | that can be controlled.
                    section
                        h1.section-title Derivative - D
                        p
                            | The D-term will take the derivative of the error, it looks at how quickly the error is
                            | changing. It will "see" into the future as it were. It forms a way of predicting of how
                            | large the error is going to become.
                        .formula-container
                            .formula
                                p $$D = K_{d} \frac{de(t)}{dt}$$
                                p.caption Formula for a D-controller
                        p
                            | The D-term will shorten the reaction-time of the PID-controller and result in overall
                            | faster controller. The way a derivative works makes the D-term especially susceptible to
                            | noise. This makes that the D-term can give quite a large output, even if the system is at
                            | the desired state. In order to prevent this, the time-step can be increased. To keep the
                            | other two terms fast enough, the input to the D-term can be averaged out. This will reduce
                            | the noise on the signal.
                    section
                        h1.section-title Output
                        p
                            | The output of the PID-controller is obtained by adding all three terms together.
                            | The three terms can be substituted by their respected equations.
                        .formula-container
                            .formula
                                p
                                    | $$u(t) = P + I + D$$
                                    | $$\Leftrightarrow$$
                                    | $$u(t) = \Biggl[K_{p} \cdot e(t)\Biggr] + \Biggl[K_{i} \int_0^t e(t)dt\Biggr] +
                                    | \Biggl[K_{d} \frac{de(t)}{dt}\Biggr]$$
                                p.caption Formula for a PID-controller
                    section
                        h1.section-title Simulation



                article#e-vision
                    h1.article-title Vision

                article#e-raspbian
                    h1.article-title Rspbian - headless


                .bottom-nav
                    .bottom-nav-left
                        .back
                            a(href="conclusion.html") &#171; back
                    .bottom-nav-right
                        //.next
                        //    a(href="#") next &#187;

            aside.right
                include includes/right-aside.pug
        footer
            include includes/footer.pug

